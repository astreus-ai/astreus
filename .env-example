# Example environment variables for the Astreus AI Framework

# ==============================
# Global Model Configuration (Provider-Agnostic)
# ==============================
# These settings apply to all providers and can be overridden by provider-specific configs

# Main model name - can include provider prefix (e.g., "openai/gpt-4o-mini", "claude-3-haiku-20240307")
MODEL_NAME=gpt-4o-mini

# Model parameters (applied to all providers)
TEMPERATURE=0.7
MAX_TOKENS=2048

# Embedding model (for RAG and text embeddings)
EMBEDDING_MODEL=text-embedding-3-small

# ==============================
# Provider API Keys & Base URLs
# ==============================

# OpenAI Configuration
OPENAI_API_KEY=your_openai_api_key_here
OPENAI_BASE_URL=https://api.openai.com/v1

# OpenAI Specialized API Keys (optional - if different from main API key)
OPENAI_EMBEDDING_API_KEY=your_openai_embedding_api_key_here
OPENAI_VISION_API_KEY=your_openai_vision_api_key_here
OPENAI_VISION_BASE_URL=https://api.openai.com/v1

# Claude (Anthropic) Configuration
ANTHROPIC_API_KEY=your_anthropic_api_key_here
ANTHROPIC_BASE_URL=https://api.anthropic.com

# Gemini (Google) Configuration
GOOGLE_API_KEY=your_google_api_key_here
GOOGLE_BASE_URL=https://generativelanguage.googleapis.com/v1

# Ollama Configuration (for local LLM usage)
OLLAMA_BASE_URL=http://localhost:11434

# ==============================
# Legacy Environment Variables (Still Supported)
# ==============================
# These are kept for backward compatibility but the global configs above take precedence

# Legacy model configuration (fallback if MODEL_NAME not set)
# DEFAULT_MODEL=gpt-4o-mini

# Legacy embedding model (fallback if EMBEDDING_MODEL not set)
# OPENAI_EMBEDDING_MODEL=text-embedding-3-small

# Database Configuration
# Choose one of the following database types:

# Option 1: SQLite (default - recommended for development)
DATABASE_TYPE=sqlite
DATABASE_PATH=./data/astreus.db

# Option 2: PostgreSQL (recommended for production)
# DATABASE_TYPE=postgresql
# DATABASE_URL=postgres://username:password@localhost:5432/astreus_db

# PostgreSQL Alternative Configuration (if not using URL)
# POSTGRES_HOST=localhost
# POSTGRES_PORT=5432
# POSTGRES_USER=postgres
# POSTGRES_PASSWORD=your_password
# POSTGRES_DB=astreus_db

# Vector Database Configuration (for RAG functionality)
# Option 1: Use same database as main database (default)
# VECTOR_DB_TYPE=same_as_main

# Option 2: Use separate PostgreSQL database with pgvector extension
# VECTOR_DB_TYPE=postgres
# VECTOR_DB_CONNECTION_STRING=postgres://username:password@localhost:5432/astreus_vector_db

# Option 3: Use custom vector database table name
# VECTOR_DB_TABLE_NAME=custom_vector_embeddings

# Additional Vector Database Options
# VECTOR_DB_API_KEY=your_vector_db_api_key
# VECTOR_DB_ENVIRONMENT=production
# VECTOR_DB_NAMESPACE=astreus
# VECTOR_DB_BASE_URL=https://your-vector-db.com

# Additional Configuration Options
# NODE_ENV=development
# LOG_LEVEL=info

# Notes:
# - Each component (createMemory, createChat, createAgent, etc.) automatically creates its required database tables
# - You can customize table names using the tableNames parameter in each component
# - For production use, consider using PostgreSQL with proper connection pooling
# - Ensure pgvector extension is installed if using PostgreSQL for vector operations
# - Vision API key is used for image analysis features
# - Embedding API key is used for text embeddings and RAG functionality 